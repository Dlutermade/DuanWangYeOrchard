/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect, useRef } from 'react';

import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { ThreeEvent } from '@react-three/fiber';
import { useSpring, animated as a } from '@react-spring/three';

type GLTFResult = GLTF & {
  nodes: {
    groupNumber_0_6: THREE.Mesh;
    groupNumber_0_2: THREE.Mesh;
    groupNumber_0: THREE.Mesh;
  };
  materials: {
    material0: THREE.MeshStandardMaterial;
    material1: THREE.MeshStandardMaterial;
    material2: THREE.MeshStandardMaterial;
  };
};

type Props = {
  changeDisplayIngredients: (idx: number) => void;
} & JSX.IntrinsicElements['group'];

const Color: {
  [n in keyof GLTFResult['materials']]: {
    enter: THREE.Color;
    leave: THREE.Color;
  };
} = {
  material0: {
    enter: new THREE.Color(),
    leave: new THREE.Color(),
  },
  material1: {
    enter: new THREE.Color(),
    leave: new THREE.Color(),
  },
  material2: {
    enter: new THREE.Color(),
    leave: new THREE.Color(),
  },
};

const Avocado: React.FC<Props> = ({ changeDisplayIngredients, ...props }) => {
  const { nodes, materials } = useGLTF(
    'models/avocado1/model.glb'
  ) as unknown as GLTFResult;

  const spring = useAvocadoSpring();

  const ref = useRef<THREE.Group>(null);

  useEffect(() => {
    const list: (keyof GLTFResult['materials'])[] = [
      'material0',
      'material1',
      'material2',
    ];

    list.forEach((item) => {
      Color[item].enter = materials[item].color.clone().addScalar(0.2);
      Color[item].leave = materials[item].color.clone();
    });
  }, []);

  const handleDisplayIngredients =
    (idx: number) => (e: ThreeEvent<MouseEvent>) => {
      e.stopPropagation();
      console.log(idx);
      changeDisplayIngredients(idx);
    };

  const handleChangeColor =
    (key: keyof GLTFResult['materials']) =>
    (isEnter: boolean) =>
    (e: ThreeEvent<PointerEvent>) => {
      e.stopPropagation();

      document.body.style.cursor = isEnter ? 'pointer' : 'auto';

      materials[key].color = Color[key][isEnter ? 'enter' : 'leave'];
    };

  return (
    <a.group
      {...props}
      {...spring}
      ref={ref}
      rotation={[-0, -1.5, -0.6]}
      dispose={null}
      castShadow
      receiveShadow
    >
      <mesh
        geometry={nodes.groupNumber_0_6.geometry}
        material={materials.material0}
        position={[-0.05, 1.62, 0.12]}
        rotation={[1.39, -0.76, 0.9]}
        onDoubleClick={handleDisplayIngredients(1)}
        onPointerEnter={handleChangeColor('material0')(true)}
        onPointerLeave={handleChangeColor('material0')(false)}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.groupNumber_0_2.geometry}
        material={materials.material1}
        position={[0.67, 1.82, -0.03]}
        rotation={[0.97, 0.75, -1.3]}
        scale={[1, 1.02, 1]}
        onDoubleClick={handleDisplayIngredients(0)}
        onPointerEnter={handleChangeColor('material1')(true)}
        onPointerLeave={handleChangeColor('material1')(false)}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.groupNumber_0.geometry}
        material={materials.material2}
        position={[-0.56, 1.4, 0.22]}
        rotation={[1.41, -0.85, 0.98]}
        onDoubleClick={handleDisplayIngredients(1)}
        onPointerEnter={handleChangeColor('material2')(true)}
        onPointerLeave={handleChangeColor('material2')(false)}
        castShadow
        receiveShadow
      />
    </a.group>
  );
};

const useAvocadoSpring = () =>
  useSpring({
    from: {
      scale: 0,
    },
    to: {
      scale: 1,
    },
  });

useGLTF.preload('/model.glb');

export default Avocado;
